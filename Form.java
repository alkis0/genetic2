/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package genetic2;

import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class Form extends javax.swing.JFrame {

	public int members;
	public int len;
	
	public ArrayList<Chromosome> chromosome_list;
	
	
	public Form() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chromosome_members = new javax.swing.JTextField();
        chromosome_length = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        create_population = new javax.swing.JButton();
        new_population = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextArea();
        checkbox_elitism = new java.awt.Checkbox();
        checkbox_escalate = new java.awt.Checkbox();
        exchange_chance = new javax.swing.JTextField();
        inversion_chance = new javax.swing.JTextField();
        mutation_chance = new javax.swing.JTextField();
        Exchange = new javax.swing.JButton();
        mutate = new javax.swing.JButton();
        inversion = new javax.swing.JButton();
        run = new javax.swing.JButton();
        run_times = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chromosome_members.setText("5");

        chromosome_length.setText("16");

        jLabel1.setText("Population Members:");

        jLabel2.setText("Chromosome Length:");

        create_population.setText("Create Population");
        create_population.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_populationActionPerformed(evt);
            }
        });

        new_population.setText("New Population");
        new_population.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_populationActionPerformed(evt);
            }
        });

        results.setColumns(20);
        results.setRows(5);
        jScrollPane1.setViewportView(results);

        checkbox_elitism.setLabel("elitism");

        checkbox_escalate.setLabel("escalate");

        exchange_chance.setText("0.80");

        inversion_chance.setText("0.70");

        mutation_chance.setText("0.01");

        Exchange.setText("Crossover");
        Exchange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExchangeActionPerformed(evt);
            }
        });

        mutate.setText("Mutation");
        mutate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mutateActionPerformed(evt);
            }
        });

        inversion.setText("Inversion");
        inversion.setToolTipText("");
        inversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversionActionPerformed(evt);
            }
        });

        run.setText("Run");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        run_times.setText("10");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chromosome_length)
                            .addComponent(chromosome_members)
                            .addComponent(create_population, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(new_population)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(44, 44, 44)
                                    .addComponent(checkbox_escalate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(checkbox_elitism, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(inversion_chance, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inversion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Exchange, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(exchange_chance))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mutate, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(mutation_chance))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(run, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(run_times))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chromosome_members, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(checkbox_elitism, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chromosome_length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(checkbox_escalate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create_population)
                    .addComponent(new_population))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exchange_chance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mutation_chance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(run_times, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Exchange)
                    .addComponent(mutate)
                    .addComponent(run))
                .addGap(16, 16, 16)
                .addComponent(inversion_chance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inversion)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	
	
		
	public void display(ArrayList<Chromosome> c,int members,int b){
		DecimalFormat df=new DecimalFormat("#.###");
		
		
		if(b==0){	
			if(len<=8)
				results.setText("A/A\tchromosome\tvalue\tselection value\n");
			else
				results.setText("A/A\t\tchromosome\t\tvalue\tselection value\n");
		}
		else if(b==1){	
			if(len<=8)
				results.append("A/A\tchromosome\tvalue\tselection value\n");
			else
				results.append("A/A\t\tchromosome\t\tvalue\tselection value\n");
		}
		for(int i=0;i<members;i++){
			String x=new String(String.valueOf(c.get(i).value));
			String y=new String(String.valueOf(c.get(i).selection_value));
			
			double a_=Double.parseDouble(x);
			double b_=Double.parseDouble(y);
			
			
			if(len<=8){
				results.append(i+1+"\t"+c.get(i).Binary_Form+"\t"+df.format(a_)+"\t"+df.format(b_));
				results.append("\n");
			}
			else{
				results.append(i+1+"\t\t"+c.get(i).Binary_Form+"\t"+df.format(a_)+"\t"+df.format(b_));
				results.append("\n");
			}
		}
		
	}
	
    private void create_populationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_populationActionPerformed
        // TODO add your handling code here:
		//create new chromosomes
			chromosome_list=null;
			chromosome_list=new ArrayList<Chromosome>();

			try{
				members=Integer.parseInt(chromosome_members.getText());
		        len=Integer.parseInt(chromosome_length.getText());
			}catch (Exception ex){
				JOptionPane.showMessageDialog(null, "You should enter valid numbers");
				return;
			}
			//Random rand=new Random(System.currentTimeMillis());

			chromosome_list=operations.createPopulation(chromosome_list, members, len);

			display(chromosome_list,members,0);
		
    }//GEN-LAST:event_create_populationActionPerformed

    private void new_populationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_populationActionPerformed
		chromosome_list=operations.createNewPopulation(chromosome_list,members,len,this,new Random(System.currentTimeMillis()));
    }//GEN-LAST:event_new_populationActionPerformed

    private void ExchangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExchangeActionPerformed
			double chance=0;
			try{
				chance=Double.parseDouble(exchange_chance.getText());
			}catch(Exception ex){
				JOptionPane.showMessageDialog(null,"You should eneter valid numbers");
			}

			operations.exchange(chromosome_list,members,len,this,chance);
		
    }//GEN-LAST:event_ExchangeActionPerformed

    private void mutateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mutateActionPerformed
        double chance=0;
			try{
				chance=Double.parseDouble(mutation_chance.getText());
			}catch(Exception ex){
				JOptionPane.showMessageDialog(null,"You should enter a valid chance");
			}
			operations.Mutation(chromosome_list,members,len,this,chance);

    }//GEN-LAST:event_mutateActionPerformed

    private void inversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversionActionPerformed
		double chance=0;
			try{
				chance=Double.parseDouble(inversion_chance.getText());
				
			}catch(Exception ex){
				JOptionPane.showMessageDialog(null,"You should enter a valid chance");
				return ;
			}
			operations.Inversion(chromosome_list,members,len,this,chance);
		
		
    }//GEN-LAST:event_inversionActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
       int times=0;
			
			int len=0;
			double exchange_c;
			double mutation_c;
			
			double average=0;
			try{
			PrintWriter pw=new PrintWriter("output.txt","UTF-8");
		
			if(chromosome_list==null){
				chromosome_list=new ArrayList<Chromosome>();
				operations.createPopulation(chromosome_list,Integer.parseInt(chromosome_members.getText()),Integer.parseInt(chromosome_length.getText()));
			}
			try{
				times=Integer.parseInt(run_times.getText());
				if(members==0)
				members=Integer.parseInt(chromosome_members.getText());
				len=Integer.parseInt(chromosome_length.getText());
				exchange_c=Double.parseDouble(exchange_chance.getText());
				mutation_c=Double.parseDouble(mutation_chance.getText());
			}catch(Exception ex){
				JOptionPane.showMessageDialog(null,"You should enter valid numbers");
				return;
			}
			


			
			for(int i=0;i<times;i++){
				average=0;
				chromosome_list=operations.createNewPopulation(chromosome_list, members, len, this, new Random(System.currentTimeMillis()));
				operations.exchange(chromosome_list,members,len,this,exchange_c);
				operations.Mutation(chromosome_list,members,len,this,mutation_c);
				for(int j=0;j<members;j++){
					average+=chromosome_list.get(j).value;
				}
				pw.println(average/members);
				
			}
				pw.close();
			}catch(Exception e){
				JOptionPane.showMessageDialog(null, "not found");
			}
			
			
    }//GEN-LAST:event_runActionPerformed

	
	
	
	public java.awt.Checkbox checkbox_escalate(){
		return checkbox_escalate;
	}
	
	
	
	public java.awt.Checkbox checkbox_elitism(){
		return checkbox_elitism;
	}
	
	
	public javax.swing.JTextArea results(){
		return results;
	}
	

	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Form().setVisible(true);
				
			}
		});
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exchange;
    private java.awt.Checkbox checkbox_elitism;
    private java.awt.Checkbox checkbox_escalate;
    private javax.swing.JTextField chromosome_length;
    private javax.swing.JTextField chromosome_members;
    private javax.swing.JButton create_population;
    private javax.swing.JTextField exchange_chance;
    private javax.swing.JButton inversion;
    private javax.swing.JTextField inversion_chance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mutate;
    private javax.swing.JTextField mutation_chance;
    private javax.swing.JButton new_population;
    private javax.swing.JTextArea results;
    private javax.swing.JButton run;
    private javax.swing.JTextField run_times;
    // End of variables declaration//GEN-END:variables
}
